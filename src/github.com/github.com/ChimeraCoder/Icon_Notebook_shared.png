package main

import (
	"go/ast"
	"io"
)

func PrettyPrintTypeExpr(out io.Writer, e ast.Expr) {
	switch t := e.(type) {
	case *ast.StarExpr:
		fmt.Fprintf(out, "*")
		PrettyPrintTypeExpr(out, t.X)
	case *ast.Ident:
		// ast.Ident type decl as a reminder (note embedded type):
		//
		// type Ident struct {
		//     token.Position         // identifier position
		//     Obj            *Object // denoted object
		// }
		//
		// Correct type inference in complex type switch statements +
		// support for type embedding
		fmt.Fprintf(out, t.Name())
		t.@
	case *ast.ArrayType:
		fmt.Fprintf(out, "[]")
		PrettyPrintTypeExpr(out, t.Elt)
	case *ast.SelectorExpr:
		PrettyPrintTypeExpr(out, t.X)
		fmt.Fprintf(out, ".%s", t.Sel.Name())
	case *ast.FuncType:
		// SKIP THIS